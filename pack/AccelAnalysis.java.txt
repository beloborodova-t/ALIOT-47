package com.furr.MeCO;

import android.util.Log;
import com.parse.ParseUser;
import java.util.ArrayList;
import almadani.com.shared.AccelData;

public class AccelAnalysis {
    private ArrayList<AccelData> AD;
    private ParseFunctions customParse;
    private double ArrZ_double[],ArrZ_Normalized[];
    private int ADSize;
    public AccelAnalysis(){customParse = new ParseFunctions();}
    public ArrayList<AccelData> getAccelData() {
        try {
            AD = new ArrayList<>();
            AD = customParse.getParseDataAccel(ParseUser.getCurrentUser(), 1,
                    "AccelData", "createdAt", "ArrayList"); //  right hand
            ADSize = AD.size();
        }catch (Exception e){
            Log.d("ACCel analysis", "getAccelData: problem");
        }
        return AD; //get time series of
    }
    public double[] ConvertToDoubleArr(ArrayList<AccelData> AD, int size) {
        double ArrZ_d[] = new double[size];
        for (int i = 0; i<size; i++){
            ArrZ_d[i] = AD.get(i).getZ(); //get Y-axis only
        }
        return ArrZ_d;
    }

    public int PerformAnalysis1() {  //rescale
        int resscale;
        AD = getAccelData(); //get data from parse
        ArrZ_double = ConvertToDoubleArr(AD, ADSize); //convert to double array
        double Mean = getMean();
        ArrZ_Normalized = NormalizeArrayZ(ArrZ_double, Mean);
        double VC = getVarCoeff();
        Log.d("Variation Coefficient", VC + ""); //1
        if (VC>=1.58E-04 && VC<3.26E-04)
        {
            resscale=1;
            Log.d("VC", "Slight Tremor Detected"); //2
        }//else if (VC >=3.26E-04 && VC<4.16E-03) {
        else if (VC >=3.26E-04 && VC<8.16E-04) {
            resscale=2;
            Log.d("VC", "Mild Tremor Detected"); //3
        }//else if(VC>=4.16E-03 && VC<1.31E-02) {
        else if(VC>=8.16E-04 && VC<5.31E-03) {
            resscale=3;
            Log.d("VC", "Moderate Tremor Detected");//4
        }//else if(VC>=1.31E-02) {
        else if(VC>=5.31E-03) {
            resscale=4;
            Log.d("VC", "Severe Tremor Detected");//5
        }
        else    resscale =0;
        return  resscale;
    }
    private double getVarCoeff() //returns coefficient of variation
    {
        Statistics s = new Statistics((ArrZ_Normalized));
        return s.getVariance();
    }
    private double getMean()
    {
        Statistics s = new Statistics((ArrZ_double));
        return s.getMean();
    }
    //нормализует значения двойного массива данных акселерометра по гравитации "g"
    private double[] NormalizeArrayZ(double[] Arr, double M){
        double ArrZ_d[] = new double[Arr.length];
        for (int i = 0; i<Arr.length; i++){
            ArrZ_d[i] = (Arr[i])/M; //get Z-axis only
        }
        return ArrZ_d;
    }
}
